package yamlcommentpreserving

import (
	"fmt"

	"gopkg.in/yaml.v3"
)

func Unmarshal(data []byte, into interface{}) (*Writer, error) {
	var w Writer
	if err := yaml.Unmarshal(data, &w.original); err != nil {
		return nil, fmt.Errorf("failed to unmarshal into yaml.Node: %w", err)
	}
	if err := w.original.Decode(into); err != nil {
		return nil, err
	}
	return &w, nil

}

type Writer struct {
	original yaml.Node
}

func (w *Writer) Marshal(in interface{}) ([]byte, error) {
	// Marshal into yaml.Node
	// There is yaml.Node.Encode, but the resulting node
	// looks completely different from one generated by
	// encoding a yaml doc into it.
	serialized, err := yaml.Marshal(in)
	if err != nil {
		return nil, fmt.Errorf("failed to serialize: %w", err)
	}
	var node yaml.Node
	if err := yaml.Unmarshal(serialized, &node); err != nil {
		return nil, fmt.Errorf("failed to unmarshal: %w", err)
	}

	copyCommentsFromOldNode(&w.original, &node)

	return yaml.Marshal(&node)
}

func copyCommentsFromOldNode(old, n *yaml.Node) {
	n.HeadComment = old.HeadComment
	n.LineComment = old.LineComment
	n.FootComment = old.FootComment

	for _, child := range n.Content {
		for _, oldChild := range old.Content {
			if child.Tag != oldChild.Tag || child.Value != oldChild.Value {
				continue
			}
			copyCommentsFromOldNode(oldChild, child)
		}
	}
}
